---js
{
  pagination: {
    data: "collections.all",
    size: 1,
    alias: "redirect",
    before: data => {
      const redirects = new Map()

      for (const { url, data: { slug, redirect_from = [] }} of data) {
        if (!Array.isArray(redirect_from) && typeof redirect_from !== 'string') {
          redirect_from = null
        }
        const redirFrom = new Set(
          Array.isArray(redirect_from) ? redirect_from
            : redirect_from ? [redirect_from]
            : []
        )
        redirFrom.add(url)
        let sslug = slug
        if (!sslug) {
          const slugmatch = url.match(/^\/[0-9]{4}\/[0-9]{2}\/([^\/]+)/) || []
          sslug = slugmatch[1]
        }
        if (sslug) {
          redirFrom.add('/p/' + slug)
        }
        const out = []
        for (const from of redirFrom) {
          if (from.slice(-1) === '/') {
            redirFrom.add(from.replace(/\/+$/, ''))
            continue
          }
          if (from !== url.replace(/\/+$/, '')) {
            redirects.set(from, { from, to: url })
          }
          if (from) {
            const fp = from + ')'
            const fslashp = from + '/)'
            redirects.set(fp, { from: fp, to: url })
            redirects.set(fslashp, { from: fslashp, to: url })
          }
        }
      }
      return [...redirects.values()]
    },
    addAllPagesToCollections: false,
  },
  permalink: "{{ redirect.from }}/index.html",
  eleventyExcludeFromCollections: true,
}
---
<title>HTTP/1.1 301 Moved Permanently</title>
<link rel="canonical" href="{{ redirect.to | url }}">
<script>location = '{{ redirect.to | url }}'</script>
<meta http-equiv="refresh" content="0; url={{ redirect.to | url }}">
<meta name="robots" content="noindex">
<h1>HTTP/1.1 301 Moved Permanently</h1>
<a href="{{ redirect.to | url }}">Location: {{ redirect.to }}</a>
